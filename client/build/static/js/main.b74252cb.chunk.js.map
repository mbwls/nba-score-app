{"version":3,"sources":["config/constants.js","components/DateNav/DateNav.js","components/ScoreCard/ScoreCard.js","components/GameList/GameList.js","components/GameDetails/DetailsHeader/DetailsHeader.js","components/GameDetails/GameDetails.js","utils/axios/axiosError.js","utils/axios/axiosRequest.js","actions/scoresViewAction.js","containers/ScoresView/ScoresView.js","App.js","reducers/scoresViewReducer.js","index.js","store/index.js"],"names":["APPCONST","REFERENCE","moment","app_url","server_url","window","location","hostname","TODAY","clone","startOf","YESTERDAY","subtract","TOMORROW","add","DateNav","props","_useState","useState","_useState2","Object","slicedToArray","loadedScoreData","setLoadedScoreData","setScoresDate","dateKey","format","days","i","weekStart","isoWeekday","push","react_default","a","createElement","Fragment","className","map","d","key","value","isSame","onClick","date_picker","defaultValue","placeholder","onChange","date","dateString","ScoreCard","loadedGameData","setLoadedGameData","undefined","gameData","_useState3","_useState4","loadedRefData","setLoadedRefData","dailyRefData","teamReferences","getTeamDataByID","teamID","_","find","id","iconKeyMapping","teamKey","homeTeamData","homeTeam","awayTeamData","awayTeam","homeWin","scoreData","homeScoreTotal","awayScoreTotal","concat","selectedGame","setSelectedGame","style","fontWeight","city","name","alt","width","height","src","abbreviation","GameList","keys","referenceData","length","scoresData","g","components_ScoreCard_ScoreCard","assign","schedule","score","DetailsHeader","GameDetails","GameDetails_DetailsHeader_DetailsHeader","axiosError","error","status","console","log","get","path","Promise","resolve","reject","axios","headers","Content-Type","Cache-Control","Pragma","Expires","Accept","then","response","catch","handleError","actionTypes","actionCreators","_ref","asyncToGenerator","regenerator_default","mark","_callee","dispatch","getState","newDate","wrap","_context","prev","next","scoresView","abrupt","sent","data","success","type","payload","games","references","stop","_x","_x2","apply","this","arguments","Content","Layout","ScoresView","_this","layout","row","components_DateNav_DateNav","col","isEmpty","span","components_GameList_GameList","components_GameDetails_GameDetails","Component","connect","state","bindActionCreators","objectSpread","App","react_router_dom","basename","react_router","exact","component","initialState","reducer","action","store","reducers","middleware","thunk","logger","enhancers","devToolsExtension","rootReducer","combineReducers","createStore","compose","applyMiddleware","configureStore","ReactDOM","render","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.b74252cb.chunk.js","sourcesContent":["import moment from 'moment';\nconst APPCONST = {};\nconst REFERENCE = moment();\n\nAPPCONST.app_url = 'nba-score';\nAPPCONST.server_url = window.location.hostname !== 'localhost' ? '' : 'http://localhost:3005/';\nAPPCONST.TODAY = REFERENCE.clone().startOf('day');\nAPPCONST.YESTERDAY = REFERENCE.clone().subtract(1, 'days').startOf('day');\nAPPCONST.TOMORROW = REFERENCE.clone().add(1, 'days').startOf('day');\n\nexport default APPCONST;","import React, { useState } from 'react';\nimport moment from 'moment';\nimport APPCONST from '../../config/constants';\nimport { DatePicker } from 'antd';\nimport './DateNav.css';\n\nconst DateNav = props => {\n    const [loadedScoreData, setLoadedScoreData] = useState(false);\n    if (!loadedScoreData) {\n        props.setScoresDate(moment(props.dateKey).clone().format('YYYYMMDD'));\n        setLoadedScoreData(true);\n    }\n    \n    let days = [],\n        i = 1;\n    let weekStart = moment(props.dateKey).subtract(\n        moment(props.dateKey).isoWeekday(),\n        'd'\n    );\n\n    while (i <= 7) {\n        days.push(\n            moment(weekStart)\n                .clone()\n                .add(i, 'd')\n        );\n        i++;\n    }\n\n    return (\n        <React.Fragment>\n            <nav className='date-nav'>\n                <ul>\n                    {days.map(d => {\n                        return (\n                            <li key={moment(d).format('YYYY-MM-DD')}>\n                                <div\n                                    value={d}\n                                    className={\n                                        d.startOf('day').isSame(\n                                            moment(props.dateKey)\n                                                .clone()\n                                                .startOf('day')\n                                        )\n                                            ? 'current-date date-label'\n                                            : 'date-label'\n                                    }\n                                    onClick={() => props.setScoresDate(d)}\n                                >\n                                    {d.startOf('day').isSame(APPCONST.TODAY)\n                                        ? 'Today'\n                                        : d\n                                              .startOf('day')\n                                              .isSame(APPCONST.YESTERDAY)\n                                        ? 'Yesterday'\n                                        : d\n                                              .startOf('day')\n                                              .isSame(APPCONST.TOMORROW)\n                                        ? 'Tomorrow'\n                                        : moment(d).format('ddd D MMM')}\n                                </div>\n                            </li>\n                        );\n                    })}\n                </ul>\n            </nav>\n            <DatePicker\n                defaultValue={moment(props.dateKey).clone()}\n                className='date-btn'\n                placeholder=''\n                onChange={(date, dateString) => {\n                    props.setScoresDate(dateString);\n                }}\n            />\n        </React.Fragment>\n    );\n};\n\nexport default DateNav;\n","import React, { useState } from 'react';\nimport _ from 'lodash';\nimport './ScoreCard.css';\n\nconst ScoreCard = props => {\n    /* START HOOKS */\n    const [loadedGameData, setLoadedGameData] = useState(false);\n    if (!loadedGameData && props.gameData !== undefined)\n        setLoadedGameData(true);\n\n    const [loadedRefData, setLoadedRefData] = useState(false);\n    if (!loadedRefData && props.dailyRefData.teamReferences !== undefined)\n        setLoadedRefData(true);\n    /* END HOOKS */\n\n    const getTeamDataByID = teamID => {\n        return _.find(props.dailyRefData.teamReferences, { id: teamID });\n    };\n\n    const iconKeyMapping = teamKey => {\n        switch (teamKey) {\n            case 'BRO':\n                return 'BKN';\n            case 'OKL':\n                return 'OKC';\n            default:\n                return teamKey;\n        }\n    };\n\n    const homeTeamData = getTeamDataByID(props.gameData.homeTeam.id);\n    const awayTeamData = getTeamDataByID(props.gameData.awayTeam.id);\n    const homeWin =\n        props.scoreData.homeScoreTotal > props.scoreData.awayScoreTotal;\n\n    return loadedRefData && loadedGameData ? (\n        <div\n            className={`score-card${\n                props.selectedGame.id === props.gameData.id ? ' selected' : ''\n            }`}\n            onClick={() => props.setSelectedGame(props.gameData)}\n        >\n            {homeTeamData && awayTeamData && props.scoreData ? (\n                <React.Fragment>\n                    <div className='team-info away'>\n                        <span\n                            className='team-name'\n                            style={!homeWin ? { fontWeight: 'bold' } : null}\n                        >\n                            {`${awayTeamData.city} ${awayTeamData.name}`}\n                        </span>\n                        <div className='icon-wrapper'>\n                            <img\n                                alt='away-logo'\n                                width={45}\n                                height={45}\n                                src={`https://www.nba.com/assets/logos/teams/primary/web/${iconKeyMapping(\n                                    awayTeamData.abbreviation\n                                )}.svg`}\n                            />\n                        </div>\n                    </div>\n\n                    <div className='game-score'>\n                        <span style={!homeWin ? { fontWeight: 'bold' } : null}>\n                            {props.scoreData.awayScoreTotal}\n                        </span>\n                        <span> - </span>\n                        <span style={homeWin ? { fontWeight: 'bold' } : null}>\n                            {props.scoreData.homeScoreTotal}\n                        </span>\n                        <br />\n                        <span className='game-time'>Final</span>\n                    </div>\n\n                    <div className='team-info home'>\n                        <div className='icon-wrapper'>\n                            <img\n                                alt='home-logo'\n                                width={45}\n                                height={45}\n                                src={`https://www.nba.com/assets/logos/teams/primary/web/${iconKeyMapping(\n                                    homeTeamData.abbreviation\n                                )}.svg`}\n                            />\n                        </div>\n                        <span\n                            className='team-name'\n                            style={homeWin ? { fontWeight: 'bold' } : null}\n                        >\n                            {`${homeTeamData.city} ${homeTeamData.name}`}\n                        </span>\n                    </div>\n                </React.Fragment>\n            ) : null}\n        </div>\n    ) : null;\n};\n\nexport default ScoreCard;\n","import React, { useState } from 'react';\nimport ScoreCard from '../ScoreCard/ScoreCard';\nimport './GameList.css';\n\nconst GameList = props => {\n    const [loadedRefData, setLoadedRefData] = useState(false);\n    if (!loadedRefData && Object.keys(props.referenceData).length > 0)\n        setLoadedRefData(true);\n\n    return loadedRefData ? (\n        <div className='game-list'>\n            {props.scoresData.map(g => {\n                return (\n                    <ScoreCard\n                        {...props}\n                        key={g.schedule.id}\n                        gameData={g.schedule}\n                        scoreData={g.score}\n                        dailyRefData={props.referenceData}\n                    />\n                );\n            })}\n        </div>\n    ) : null;\n};\n\nexport default GameList;\n","import React from 'react';\nimport './DetailsHeader.css';\n\nconst DetailsHeader = props => {\n    return (\n        <div className='details-header'>\n            <div className='header-logo'>\n                <img\n                    src='https://www.nba.com/assets/logos/teams/primary/web/DAL.svg'\n                    width='160'\n                    height='120'\n                    alt='away-team-header'\n                />\n                <div className='header-team-name'>Dallas Mavericks</div>\n            </div>\n            <div className='header-score'>\n                91 - 84\n            </div>\n            <div className='header-logo'>\n                <img\n                    src='https://www.nba.com/assets/logos/teams/primary/web/WAS.svg'\n                    width='160'\n                    height='120'\n                    alt='home-team-header'\n                />\n                <div className='header-team-name'>Washington Wizards</div>\n            </div>\n        </div>\n    );\n};\n\nexport default DetailsHeader;\n","import React from 'react';\nimport './GameDetails.css';\nimport DetailsHeader from './DetailsHeader/DetailsHeader';\n\nconst GameDetails = props => {\n    return (\n        <div className='game-details'>\n            <DetailsHeader {...props} />\n        </div>\n    );\n};\n\nexport default GameDetails;\n","export default error => {\n    const { status } = error;\n    switch (status) {\n        case 400:\n        case 401:\n        case 403:\n        case 404:\n        case 500:\n            return console.log(`${status} error!`, error);\n        default:\n            return 'frontend error';\n    }\n};\n","import axios from 'axios';\nimport handleError from './axiosError';\nimport APPCONST from '../../config/constants';\n\nconst getHeaders = () => ({\n    headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        Pragma: 'no-cache',\n        Expires: 0,\n        Accept: 'application/json'\n    }\n});\n\nconst getFormHeaders = () => ({\n    headers: {\n        Accept: 'application/json',\n        'Content-Type': 'multipart/form-data'\n    }\n});\n\n// HTTP GET Request - Returns Resolved or Rejected Promise\nexport const get = path => {\n    return new Promise((resolve, reject) => {\n        axios\n            .get(`${APPCONST.server_url}${path}`, getHeaders())\n            .then(response => {\n                resolve(response);\n            })\n            .catch(error => {\n                reject(handleError(error.response));\n            });\n    });\n};\n\n// HTTP POST Request - Returns Resolved or Rejected Promise\nexport const post = (path, data, formdata = false) => {\n    let head = formdata ? getFormHeaders() : getHeaders();\n    return new Promise((resolve, reject) => {\n        axios\n            .post(`${APPCONST.server_url}${path}`, data, head)\n            .then(response => {\n                resolve(response);\n            })\n            .catch(error => {\n                reject(handleError(error.response));\n            });\n    });\n};\n","import { get } from '../utils//axios/axiosRequest';\nimport moment from 'moment';\n\nconst requestDailyScores = 'REQUEST_DAILY_SCORES';\nconst updateDailyReferenceData = 'UPDATE_DAILY_REFERENCE';\nconst setScoresDate = 'SET_SCORES_DATE';\nconst setSelectedGame = 'SET_SELECTED_GAME';\n\nexport const actionTypes = {\n    requestDailyScores,\n    setScoresDate,\n    setSelectedGame,\n    updateDailyReferenceData\n};\n\nexport const actionCreators = {\n    setScoresDate: dateString => async (dispatch, getState) => {\n        const newDate = moment(dateString).format();\n\n        if (\n            moment(getState().scoresView.dateKey)\n                .clone()\n                .startOf('day')\n                .isSame(\n                    moment(newDate)\n                        .clone()\n                        .startOf('day')\n                ) &&\n            getState().scoresView.scoresData.length > 0\n        )\n            return;\n\n        let response = await get(\n            `nba-scores/nba-data/getDailyScoresRS?date=${moment(newDate)\n                .clone()\n                .format('YYYYMMDD')}`\n        );\n        if (response.data.success) {\n            dispatch({ type: setScoresDate, payload: newDate });\n            dispatch({\n                type: requestDailyScores,\n                payload: response.data.data.games\n            });\n            dispatch({\n                type: updateDailyReferenceData,\n                payload: response.data.data.references\n            });\n        }\n    },\n\n    setSelectedGame: gameData => (dispatch, getState) => {\n        dispatch({\n            type: setSelectedGame,\n            payload: gameData\n        });\n    }\n};\n","import React, { Component } from 'react';\nimport _ from 'lodash';\nimport { Layout, Row, Col } from 'antd';\nimport DateNav from '../../components/DateNav/DateNav';\nimport GameList from '../../components/GameList/GameList';\nimport GameDetails from '../../components/GameDetails/GameDetails';\nimport 'antd/dist/antd.css';\nimport './ScoresView.css';\n\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { actionCreators } from '../../actions/scoresViewAction';\n\nconst { Content } = Layout;\n\nclass ScoresView extends Component {\n    render() {\n        return (\n            <div className='scores-view'>\n                <Layout>\n                    <Content>\n                        <Layout>\n                            <Row className='header-content-row'>\n                                <DateNav {...this.props} />\n                            </Row>\n                            <Row className='main-content-row'>\n                                <Col\n                                    className={`main-content-col content-game-list${\n                                        _.isEmpty(this.props.selectedGame)\n                                            ? ' open'\n                                            : ''\n                                    }`}\n                                    span={11}\n                                >\n                                    <GameList {...this.props} />\n                                </Col>\n                                <Col\n                                    className='main-content-col content-game-details'\n                                    span={13}\n                                >\n                                    <button\n                                        className='close-details'\n                                        onClick={() =>\n                                            this.props.setSelectedGame({})\n                                        }\n                                    />\n                                    <GameDetails {...this.props} />\n                                </Col>\n                            </Row>\n                        </Layout>\n                    </Content>\n                </Layout>\n            </div>\n        );\n    }\n}\n\nexport default connect(\n    state => {\n        return state.scoresView;\n    },\n    dispatch => bindActionCreators({ ...actionCreators }, dispatch)\n)(ScoresView);\n","import React from 'react';\nimport { Switch, Route, BrowserRouter } from 'react-router-dom';\nimport ScoresView from './containers/ScoresView/ScoresView';\n\n\nfunction App() {\n    return (\n        <div className='App'>\n            <BrowserRouter basename='nba-scores'>\n                <Switch>\n                    <Route exact path='/scores' component={ScoresView} />\n                    <Route exact path='/game/:gameID' />\n                    <Route component={ScoresView} />\n                </Switch>\n            </BrowserRouter>\n        </div>\n    );\n}\n\nexport default App;\n","import moment from 'moment';\nimport { actionTypes } from '../actions/scoresViewAction';\n\nconst initialState = {\n    dateKey: moment('20190306'),\n    scoresData: [],\n    referenceData: [],\n    selectedGame: {}\n};\n\nexport const reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.setScoresDate:\n            return { ...state, dateKey: action.payload };\n        case actionTypes.requestDailyScores:\n            return { ...state, scoresData: action.payload };\n        case actionTypes.updateDailyReferenceData:\n            return { ...state, referenceData: action.payload };\n        case actionTypes.setSelectedGame:\n            return { ...state, selectedGame: action.payload };\n        default:\n            return state;\n    }\n};\n","import 'babel-polyfill';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport configureStore from './store';\n\nconst store = configureStore();\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n","import { applyMiddleware, combineReducers, compose, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport { logger } from 'redux-logger';\nimport * as ScoresView from '../reducers/scoresViewReducer';\n\nconst configureStore = () => {\n    // ALL REDUCERS FOR APP\n    const reducers = {\n        scoresView: ScoresView.reducer\n    };\n\n    // LOGGER FOR DEV PURPOSES\n    const middleware = [thunk, logger];\n\n    // In development, use the browser's Redux dev tools extension if installe\n    const enhancers = [];\n\n    if (typeof window !== 'undefined' && window.devToolsExtension)\n        enhancers.push(window.devToolsExtension());\n\n    const rootReducer = combineReducers({\n        ...reducers\n    });\n\n    const store = createStore(\n        rootReducer,\n        compose(\n            applyMiddleware(...middleware),\n            ...enhancers\n        )\n    );\n\n    return store;\n};\n\nexport default configureStore;\n"],"sourceRoot":""}